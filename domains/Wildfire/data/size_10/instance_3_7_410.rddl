non-fluents nf_wildfire_mdp__3_7 {
    domain = wildfire_mdp;
    objects {
        x_pos : {x1,x2,x3};
        y_pos : {y1,y2,y3,y4,y5,y6,y7};
    };
    non-fluents {
        NEIGHBOR(x1,y1,x1,y1);
        NEIGHBOR(x1,y1,x1,y3);
        NEIGHBOR(x1,y1,x2,y1);
        NEIGHBOR(x1,y1,x2,y3);
        NEIGHBOR(x1,y1,x2,y6);
        NEIGHBOR(x1,y1,x3,y2);
        NEIGHBOR(x1,y1,x3,y3);
        NEIGHBOR(x1,y1,x3,y4);
        NEIGHBOR(x1,y1,x3,y6);
        NEIGHBOR(x1,y2,x1,y2);
        NEIGHBOR(x1,y2,x1,y5);
        NEIGHBOR(x1,y2,x2,y5);
        NEIGHBOR(x1,y2,x2,y6);
        NEIGHBOR(x1,y2,x3,y1);
        NEIGHBOR(x1,y2,x3,y6);
        NEIGHBOR(x1,y2,x3,y7);
        NEIGHBOR(x1,y3,x1,y1);
        NEIGHBOR(x1,y3,x1,y5);
        NEIGHBOR(x1,y3,x1,y7);
        NEIGHBOR(x1,y3,x2,y3);
        NEIGHBOR(x1,y3,x2,y6);
        NEIGHBOR(x1,y3,x2,y7);
        NEIGHBOR(x1,y3,x3,y3);
        NEIGHBOR(x1,y3,x3,y4);
        NEIGHBOR(x1,y4,x1,y4);
        NEIGHBOR(x1,y4,x1,y5);
        NEIGHBOR(x1,y4,x1,y6);
        NEIGHBOR(x1,y4,x2,y4);
        NEIGHBOR(x1,y4,x2,y5);
        NEIGHBOR(x1,y4,x3,y3);
        NEIGHBOR(x1,y4,x3,y6);
        NEIGHBOR(x1,y4,x3,y7);
        NEIGHBOR(x1,y5,x1,y3);
        NEIGHBOR(x1,y5,x1,y4);
        NEIGHBOR(x1,y5,x1,y5);
        NEIGHBOR(x1,y5,x1,y7);
        NEIGHBOR(x1,y5,x2,y1);
        NEIGHBOR(x1,y5,x2,y2);
        NEIGHBOR(x1,y5,x2,y5);
        NEIGHBOR(x1,y5,x2,y6);
        NEIGHBOR(x1,y5,x3,y3);
        NEIGHBOR(x1,y5,x3,y5);
        NEIGHBOR(x1,y6,x1,y2);
        NEIGHBOR(x1,y6,x1,y3);
        NEIGHBOR(x1,y6,x2,y3);
        NEIGHBOR(x1,y6,x2,y4);
        NEIGHBOR(x1,y6,x2,y5);
        NEIGHBOR(x1,y6,x3,y1);
        NEIGHBOR(x1,y6,x3,y4);
        NEIGHBOR(x1,y6,x3,y6);
        NEIGHBOR(x1,y7,x1,y1);
        NEIGHBOR(x1,y7,x1,y3);
        NEIGHBOR(x1,y7,x1,y4);
        NEIGHBOR(x1,y7,x1,y5);
        NEIGHBOR(x1,y7,x2,y1);
        NEIGHBOR(x1,y7,x3,y5);
        NEIGHBOR(x1,y7,x3,y6);
        NEIGHBOR(x1,y7,x3,y7);
        NEIGHBOR(x2,y1,x1,y1);
        NEIGHBOR(x2,y1,x1,y2);
        NEIGHBOR(x2,y1,x1,y3);
        NEIGHBOR(x2,y1,x1,y7);
        NEIGHBOR(x2,y1,x2,y3);
        NEIGHBOR(x2,y1,x2,y4);
        NEIGHBOR(x2,y1,x2,y6);
        NEIGHBOR(x2,y1,x3,y1);
        NEIGHBOR(x2,y1,x3,y6);
        NEIGHBOR(x2,y1,x3,y7);
        NEIGHBOR(x2,y2,x1,y1);
        NEIGHBOR(x2,y2,x2,y1);
        NEIGHBOR(x2,y2,x2,y4);
        NEIGHBOR(x2,y2,x2,y7);
        NEIGHBOR(x2,y2,x3,y2);
        NEIGHBOR(x2,y2,x3,y3);
        NEIGHBOR(x2,y3,x1,y1);
        NEIGHBOR(x2,y3,x1,y4);
        NEIGHBOR(x2,y3,x2,y1);
        NEIGHBOR(x2,y3,x2,y6);
        NEIGHBOR(x2,y3,x3,y1);
        NEIGHBOR(x2,y3,x3,y4);
        NEIGHBOR(x2,y3,x3,y7);
        NEIGHBOR(x2,y4,x1,y1);
        NEIGHBOR(x2,y4,x1,y4);
        NEIGHBOR(x2,y4,x1,y5);
        NEIGHBOR(x2,y4,x1,y7);
        NEIGHBOR(x2,y4,x2,y4);
        NEIGHBOR(x2,y4,x3,y1);
        NEIGHBOR(x2,y4,x3,y7);
        NEIGHBOR(x2,y5,x1,y1);
        NEIGHBOR(x2,y5,x1,y2);
        NEIGHBOR(x2,y5,x1,y4);
        NEIGHBOR(x2,y5,x1,y7);
        NEIGHBOR(x2,y5,x2,y1);
        NEIGHBOR(x2,y5,x2,y2);
        NEIGHBOR(x2,y5,x2,y4);
        NEIGHBOR(x2,y5,x2,y5);
        NEIGHBOR(x2,y5,x3,y2);
        NEIGHBOR(x2,y5,x3,y3);
        NEIGHBOR(x2,y6,x1,y7);
        NEIGHBOR(x2,y6,x2,y5);
        NEIGHBOR(x2,y6,x2,y6);
        NEIGHBOR(x2,y6,x3,y3);
        NEIGHBOR(x2,y6,x3,y4);
        NEIGHBOR(x2,y6,x3,y5);
        NEIGHBOR(x2,y7,x1,y2);
        NEIGHBOR(x2,y7,x1,y3);
        NEIGHBOR(x2,y7,x1,y5);
        NEIGHBOR(x2,y7,x1,y6);
        NEIGHBOR(x2,y7,x1,y7);
        NEIGHBOR(x2,y7,x2,y1);
        NEIGHBOR(x2,y7,x2,y4);
        NEIGHBOR(x2,y7,x3,y1);
        NEIGHBOR(x2,y7,x3,y4);
        NEIGHBOR(x2,y7,x3,y5);
        NEIGHBOR(x2,y7,x3,y6);
        NEIGHBOR(x3,y1,x1,y7);
        NEIGHBOR(x3,y1,x2,y1);
        NEIGHBOR(x3,y1,x3,y2);
        NEIGHBOR(x3,y2,x1,y5);
        NEIGHBOR(x3,y2,x2,y2);
        NEIGHBOR(x3,y2,x2,y3);
        NEIGHBOR(x3,y2,x2,y7);
        NEIGHBOR(x3,y2,x3,y3);
        NEIGHBOR(x3,y2,x3,y4);
        NEIGHBOR(x3,y2,x3,y6);
        NEIGHBOR(x3,y3,x1,y3);
        NEIGHBOR(x3,y3,x1,y5);
        NEIGHBOR(x3,y3,x1,y6);
        NEIGHBOR(x3,y3,x2,y1);
        NEIGHBOR(x3,y3,x2,y2);
        NEIGHBOR(x3,y3,x2,y6);
        NEIGHBOR(x3,y3,x2,y7);
        NEIGHBOR(x3,y3,x3,y1);
        NEIGHBOR(x3,y3,x3,y2);
        NEIGHBOR(x3,y3,x3,y4);
        NEIGHBOR(x3,y4,x1,y1);
        NEIGHBOR(x3,y4,x1,y2);
        NEIGHBOR(x3,y4,x1,y4);
        NEIGHBOR(x3,y4,x1,y6);
        NEIGHBOR(x3,y4,x1,y7);
        NEIGHBOR(x3,y4,x2,y1);
        NEIGHBOR(x3,y4,x2,y2);
        NEIGHBOR(x3,y4,x2,y4);
        NEIGHBOR(x3,y4,x3,y1);
        NEIGHBOR(x3,y4,x3,y2);
        NEIGHBOR(x3,y5,x1,y1);
        NEIGHBOR(x3,y5,x1,y3);
        NEIGHBOR(x3,y5,x1,y4);
        NEIGHBOR(x3,y5,x1,y5);
        NEIGHBOR(x3,y5,x1,y6);
        NEIGHBOR(x3,y5,x2,y1);
        NEIGHBOR(x3,y5,x2,y5);
        NEIGHBOR(x3,y5,x2,y6);
        NEIGHBOR(x3,y6,x1,y4);
        NEIGHBOR(x3,y6,x1,y6);
        NEIGHBOR(x3,y6,x1,y7);
        NEIGHBOR(x3,y6,x2,y1);
        NEIGHBOR(x3,y6,x2,y3);
        NEIGHBOR(x3,y6,x3,y3);
        NEIGHBOR(x3,y6,x3,y4);
        NEIGHBOR(x3,y6,x3,y7);
        NEIGHBOR(x3,y7,x1,y4);
        NEIGHBOR(x3,y7,x1,y6);
        NEIGHBOR(x3,y7,x2,y3);
        NEIGHBOR(x3,y7,x2,y5);
        NEIGHBOR(x3,y7,x2,y7);
        NEIGHBOR(x3,y7,x3,y1);
        NEIGHBOR(x3,y7,x3,y2);
        NEIGHBOR(x3,y7,x3,y6);
        TARGET(x1,y1);
        TARGET(x2,y3);
        TARGET(x2,y4);
    };
}

instance inst_wildfire_mdp__3_7 {
    domain = wildfire_mdp;
    non-fluents = nf_wildfire_mdp__3_7;
    init-state {
        burning(x1,y1);
        burning(x2,y3);
        out-of-fuel(x1,y1);
        out-of-fuel(x2,y3);
    };
    max-nondef-actions = 1;
    horizon = 40;
    discount = 1.0;
}